generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bookings {
  booking_id   Int         @id @default(autoincrement())
  created_at   DateTime    @default(now()) @db.Timestamp(0)
  updated_at   DateTime?   @db.Timestamp(0)
  status       String      @db.VarChar(50)
  final_price  Float       @db.Float
  service_id   Int
  payment_id   Int
  promotion_id Int?
  duration_id  Int
  services     services    @relation(fields: [service_id], references: [service_id], onUpdate: Restrict, map: "bookings_ibfk_1")
  payments     payments    @relation(fields: [payment_id], references: [payment_id], onUpdate: Restrict, map: "bookings_ibfk_2")
  promotions   promotions? @relation(fields: [promotion_id], references: [promotion_id], onDelete: Restrict, onUpdate: Restrict, map: "bookings_ibfk_3")
  duration     duration    @relation(fields: [duration_id], references: [duration_id], onUpdate: Restrict, map: "bookings_ibfk_4")

  @@index([duration_id], map: "duration_id")
  @@index([payment_id], map: "payment_id")
  @@index([promotion_id], map: "promotion_id")
  @@index([service_id], map: "service_id")
}

model duration {
  start_time             String      @db.VarChar(11)
  end_time               String?     @db.VarChar(11)
  duration_id            Int         @id @default(autoincrement())
  service_id             Int?
  exception_id           Int?
  booking_day            String?     @db.VarChar(50)
  service_days_available String?     @db.VarChar(50)
  bookings               bookings[]
  services               services?   @relation(fields: [service_id], references: [service_id], onDelete: Restrict, onUpdate: Restrict, map: "duration_ibfk_1")
  exceptions             exceptions? @relation(fields: [exception_id], references: [exception_id], onDelete: Restrict, onUpdate: Restrict, map: "duration_ibfk_2")

  @@index([exception_id], map: "exception_id")
  @@index([service_id], map: "service_id")
}

model exceptions {
  exception_id Int        @id @default(autoincrement())
  is_available Boolean    @db.Bit(1)
  service_id   Int
  duration     duration[]
  services     services   @relation(fields: [service_id], references: [service_id], onUpdate: Restrict, map: "exceptions_ibfk_1")

  @@index([service_id], map: "service_id")
}

model feedback {
  feedback_id Int      @id @default(autoincrement())
  rating      Int?
  comment     String?  @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  user_id     Int
  service_id  Int
  users       users    @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "feedback_ibfk_1")
  services    services @relation(fields: [service_id], references: [service_id], onUpdate: Restrict, map: "feedback_ibfk_2")

  @@index([service_id], map: "service_id")
  @@index([user_id], map: "user_id")
}

model location {
  city              String              @db.VarChar(50)
  postal_code       String              @db.VarChar(50)
  county            String              @db.VarChar(50)
  address           String              @db.VarChar(50)
  location_id       Int                 @id @default(autoincrement())
  services_location services_location[]
}

model notifications {
  notification_id Int      @id @default(autoincrement())
  message         String   @db.VarChar(50)
  sent_at         DateTime @db.Date
  readed          Boolean  @db.Bit(1)
  user_id         Int
  users           users    @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "notifications_ibfk_1")

  @@index([user_id], map: "user_id")
}

model payments {
  payment_id Int        @id @default(autoincrement())
  value      Float      @db.Float
  date       DateTime   @default(now()) @db.Date
  status     String     @db.VarChar(50)
  method     String     @db.VarChar(50)
  user_id    Int
  bookings   bookings[]
  users      users      @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "payments_ibfk_1")

  @@index([user_id], map: "user_id")
}

model promotions {
  promotion_id    Int               @id @default(autoincrement())
  promotion_code  String            @db.VarChar(50)
  description     String?           @db.VarChar(50)
  discount_type   String            @db.VarChar(50)
  discount_value  Int
  valid_from      DateTime          @db.Date
  valid_until     DateTime          @db.Date
  was_used        Boolean           @db.Bit(1)
  bookings        bookings[]
  user_promotions user_promotions[]
}

model services {
  service_id        Int                 @id @default(autoincrement())
  name              String              @db.VarChar(50)
  description       String              @db.VarChar(50)
  created_at        DateTime            @default(now()) @db.Timestamp(0)
  updated_at        DateTime            @default(now()) @db.Timestamp(0)
  price             Float               @db.Float
  user_id           Int
  phone_number      String?             @db.VarChar(50)
  average_rating    Decimal?            @default(0.00) @db.Decimal(3, 2)
  bookings          bookings[]
  duration          duration[]
  exceptions        exceptions[]
  feedback          feedback[]
  images            images[]
  users             users               @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "services_ibfk_2")
  services_category services_category[]
  services_location services_location[]

  @@index([user_id], map: "user_id")
}

model users {
  first_name          String?           @db.VarChar(50)
  email               String            @unique(map: "unique_email") @db.VarChar(50)
  username            String            @db.VarChar(50)
  last_name           String?           @db.VarChar(50)
  role                String?           @db.VarChar(50)
  created_at          DateTime          @default(now()) @db.Timestamp(0)
  password            String?           @db.VarChar(255)
  phone_number        String?           @db.VarChar(50)
  user_id             Int               @id @default(autoincrement())
  profile_pic         String?           @db.VarChar(255)
  oauth               String?           @db.VarChar(50)
  isVerified          String            @db.VarChar(50)
  resetPasswordToken  String?           @db.VarChar(255)
  resetPasswordExpire DateTime?         @db.DateTime(0)
  verifiyToken        String?           @db.VarChar(255)
  verifiyTokenExpire  DateTime?         @db.DateTime(0)
  feedback            feedback[]
  images              images[]
  notifications       notifications[]
  payments            payments[]
  services            services[]
  user_promotions     user_promotions[]
}

model images {
  image_id   Int       @id @default(autoincrement())
  path       String    @db.VarChar(255)
  user_id    Int?
  service_id Int?
  type       String    @db.VarChar(255)
  users      users?    @relation(fields: [user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "images_ibfk_1")
  services   services? @relation(fields: [service_id], references: [service_id], onDelete: Restrict, onUpdate: Restrict, map: "images_ibfk_2")

  @@index([service_id], map: "service_id")
  @@index([user_id], map: "user_id")
}

model services_location {
  service_id  Int
  location_id Int
  services    services @relation(fields: [service_id], references: [service_id], onUpdate: Restrict, map: "services_location_ibfk_1")
  location    location @relation(fields: [location_id], references: [location_id], onUpdate: Restrict, map: "services_location_ibfk_2")

  @@id([service_id, location_id])
  @@index([location_id], map: "location_id")
}

model user_promotions {
  user_id      Int
  promotion_id Int
  users        users      @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "user_promotions_ibfk_1")
  promotions   promotions @relation(fields: [promotion_id], references: [promotion_id], onUpdate: Restrict, map: "user_promotions_ibfk_2")

  @@id([user_id, promotion_id])
  @@index([promotion_id], map: "promotion_id")
}

model category {
  category_id       Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  description       String?             @db.Text
  services_category services_category[]
}

model services_category {
  service_id  Int
  category_id Int
  services    services @relation(fields: [service_id], references: [service_id], onUpdate: Restrict, map: "services_category_ibfk_1")
  category    category @relation(fields: [category_id], references: [category_id], onUpdate: Restrict, map: "services_category_ibfk_2")

  @@id([service_id, category_id])
  @@index([category_id], map: "category_id")
}
